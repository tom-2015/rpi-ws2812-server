<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<link rel="stylesheet" type="text/css" href="style.css"/>
		<title>WS2812 Server - threads</title>
	</head>
<body>
<p>
Add a LED string of 300 LEDs WS2812 chip on PWM0 (GPIO 12) output of the Raspberry Pi.<br/>
Add a LED string of 50 LEDs WS2812 on PWM1 (GPIO 13) output.<br/>
Add a LED string of 30 SK9822 to SPI 1 interface MOSI and CLK.<br/>
The following commands will create 3 threads (a thread is something that will run commands in parallel in the background).
The first string will run the chaser effect, the second will change between red, green and blue color and the third will fade in/out.
</p>

<div class="commands">
<code>
setup 1,300,3
setup 2,50,3,0,255,19
setup 3,30,12
init

thread_start 1
chaser 1,0,FF0000
thread_stop

thread_start 2
do
   fill 2,FF0000
   render 2
   delay 1000
   fill 2,00FF00
   render 2
   delay 1000
   fill 2,0000FF
   render 2
   delay 1000
loop
thread_stop

thread_start 3
fill 3,00FF00
do
   fade 3,0,255,100
   fade 3,255,0,100
loop
thread_stop
</code>
</div>

<p>
To stop one of the 3 threads you can use the kill_thread command.
For example to stop the color changing in thread 2 you type:
</p>

<div class="commands">
<code>
kill_thread 2,1
</code>
</div>

<p>To stop thread 1 you need to abort the chaser command because it will run forever. You can do this by setting the kill type to 0</p>

<div class="commands">
<code>
kill_thread 1,0
</code>
</div>

<p>If you want to wait for a thread to finish all it's commands you use the wait_thread.<br/>NOTE: in this example all threads will run forever and this command will never return.</p>

<div class="commands">
<code>
wait_thread <thread_id>
</code>
</div>

<p>
When connecting through a socket (from PHP/website script) you should use threads to make the commands run in the background.
For example:<br/>
Start the server with tcp and the setup command:
</p>

<div class="commands">
<code>
sudo ./ws2812svr -tcp 9999 -i "setup 1,299,3; init;"
</code>
</div>

<p>From PHP send first commands:</p>
<div class="commands">
<code>
&lt;?php 
send_to_leds("thread_start 1,0;
					  &lt;YOUR EFFECT COMMANDS HERE&gt;
			 thread_stop;
			");

function send_to_leds ($data) {
	$sock = fsockopen("127.0.0.1", 9999);
	fwrite($sock, $data);
	fclose($sock);
}

?&gt;
</code>
</div>

<p>Next call to the PHP page:</p>
<div class="commands">
<code>
&lt;?php 
send_to_leds("thread_start 1,0;
					  &lt;YOUR NEXT EFFECT COMMANDS HERE&gt;
			 thread_stop;
			");
?&gt;
</code>
</div>

<p>If you want to synchronize effects between multiple threads see this <a href="sync_threads.htm">example</a>.</p>

<h3>Threads another way</h3>
This example uses threads in a different way to make 5 LED strips change in color at the same time.<br/>
Strip 3,4,5 are connected to Raspberry Pi Zero over the network using remote slave channels.
<p>
<div class="commands">
<code>
setup 1,250,5,0,255,18
setup 2,300,3,0,255,19
setup 3,100,100,"192.168.0.81",8000
setup 4,120,100,"192.168.0.82",8000
setup 5,150,100,"192.168.0.83",8000
init

thread_start 1
	color_change 1, 0, 190, 20000
thread_stop

thread_start 2
	color_change 2, 0, 190, 20000
thread_stop

thread_start 3
	color_change 3, 0, 190, 20000
thread_stop

thread_start 4
	color_change 4, 0, 190, 20000
thread_stop

thread_start 5
	color_change 5, 0, 190, 20000
thread_stop

#now wait for all effects to complete

wait_thread_exit 1
wait_thread_exit 2
wait_thread_exit 3
wait_thread_exit 4
wait_thread_exit 5

</code>
</div>
</p>

<p><a href="index.htm">Back</a></p>
</body>
</html>